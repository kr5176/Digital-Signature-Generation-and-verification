import hashlib
from ecdsa import SECP256k1

# Function to verify the digital signature
def verify_digital_signature(file_content, G_x, user_id, file_public_key, file_id, public_key, app_public_key, signature):
    # Use the SECP256k1 curve order
    q = SECP256k1.order
    message = f"{user_id}{file_public_key}{app_public_key}{file_id}".encode()

    # Step 1: Create the first intermediate value (hash of the concatenated message)
    first_intermediate_value = hashlib.sha256(message).hexdigest()
    print(f"First intermediate value (hash): {first_intermediate_value}")
    first_intermediate_value_int = int(first_intermediate_value, 16)

    # Parse the `signature` into `h` and `third_intermediate_value`
    h, third_intermediate_value = signature.split(',')
    third_intermediate_value = int(third_intermediate_value)

    # Compute R1
    combined_hash = hashlib.sha256(f"{first_intermediate_value_int}{app_public_key}".encode()).hexdigest()
    combined_hash_int = int(combined_hash, 16)

    # R1 = (third_intermediate_value ^ hash(first_intermediate_value || app_public_key)) % q
    R1 = (third_intermediate_value ^ combined_hash_int) % q
    print(f"Computed R1: {R1}")

    public_key = int(public_key)
    app_public_key = int(app_public_key)

    # Compute Z1
    Z1 = (R1 - (first_intermediate_value_int * public_key) - app_public_key) % q
    print(f"Computed Z1: {Z1}")

    # Hash the file content to compute M
    M = hashlib.sha256(file_content).hexdigest()
    print(f"Hashed file content (M): {M}")

    # Compute H1 = hash(Z1 || M)
    H1 = hashlib.sha256(f"{Z1}{M}".encode()).hexdigest()
    print(f"Computed H1: {H1}")

    # Compare H1 with the provided H
    if H1 == h:
        print("Signature is valid.")
        return True
    else:
        print("Signature is invalid.")
        return False

# Example usage of verification
def main():
    # User input for required values
    file_path = input("Enter the file path for verification: ")

    # Read the file content
    try:
        with open(file_path, 'rb') as file:
            file_content = file.read()
        print(f"File content successfully loaded from {file_path}.")
    except FileNotFoundError:
        print(f"File at {file_path} not found.")
        return

    # Getting input from the user for other parameters
    G_x = int(input("Enter the value for G_x: "))
    user_id = input("Enter the user ID: ")
    file_public_key = int(input("Enter the file public key: "))
    file_id = input("Enter the file ID: ")
    public_key = input("Enter the public key: ")
    app_public_key = input("Enter the application public key: ")

    # Input for signature as a single string
    signature = input("Enter the signature (h,third_intermediate_value) as a comma-separated string: ")

    # Perform signature verification
    is_valid = verify_digital_signature(file_content, G_x, user_id, file_public_key, file_id, public_key, app_public_key, signature)

    # Output the result
    if is_valid:
        print("The digital signature is valid.")
    else:
        print("The digital signature is invalid.")

# Entry point
if __name__ == "__main__":
    main()
