import hashlib
from ecdsa import SECP256k1
import random
import json

# Function to generate ECC key pairs
def generate_ecc_key_pair(G_x):
    private_key = random.getrandbits(256) % SECP256k1.order
    public_key = (private_key * G_x) % SECP256k1.order
    return private_key, public_key

# Function to generate the x-coordinate of a random generator point G
def generate_random_G_x():
    curve = SECP256k1
    random_scalar = random.getrandbits(256) % curve.order
    G = random_scalar * curve.generator
    print(f"Random Generator Point G: {G}")
    return G.x()

# Function to simulate Schnorr signature process
def schnorr_signature(user_id, file_private_key, file_public_key, app_public_key, file_id, private_key, app_private_key, G_x):
    message = f"{user_id}{file_public_key}{app_public_key}{file_id}".encode()
    first_intermediate_value = hashlib.sha256(message).hexdigest()
    first_intermediate_value_int = int(first_intermediate_value, 16)

    print(f"First intermediate value (hash): {first_intermediate_value}")
    print(f"First intermediate value (integer): {first_intermediate_value_int}")

    second_intermediate_value = (file_private_key - (first_intermediate_value_int * private_key)) % SECP256k1.order
    print(f"Second intermediate value: {second_intermediate_value}")

    combined_hash = hashlib.sha256(f"{first_intermediate_value_int}{app_public_key}".encode()).hexdigest()
    third_intermediate_value = (file_public_key ^ int(combined_hash, 16)) % SECP256k1.order
    print(f"Third intermediate value: {int(third_intermediate_value)}")

    fourth_intermediate_value = (second_intermediate_value - app_private_key) % SECP256k1.order
    print(f"Fourth intermediate value: {int(fourth_intermediate_value)}")

    return first_intermediate_value_int, second_intermediate_value, third_intermediate_value, fourth_intermediate_value

# Function to digitally sign the file
def digitally_sign_file(fourth_intermediate_value, third_intermediate_value, file_content, G_x, output_filename):
    Zi = (fourth_intermediate_value * G_x) % SECP256k1.order
    print(f"Zi (Intermediate Value): {Zi}")

    M = hashlib.sha256(file_content).hexdigest()
    print(f"M (File Hash): {M}")

    h_input = f"{Zi}{M}".encode()
    h = hashlib.sha256(h_input).hexdigest()
    print(f"h (Hash of Zi || M): {h}")

    signature = (h, third_intermediate_value)

    try:
        with open(output_filename, 'wb') as f:  # Save only the file content as binary
            f.write(file_content)
        print(f"File signed and saved as {output_filename}")
    except Exception as e:
        print(f"Error saving signed file: {e}")

    return signature


# Main function
def main():
    q = SECP256k1.order
    print(f"Curve Order (q): {q}")

    G_x = generate_random_G_x()
    print(f"Random Generator Point G (x-coordinate): {G_x}")

    user_id = input("Enter the User ID: ")
    file_id = input("Enter the File ID: ")

    print("\nGenerating ECC key pairs...\n")
    user_private_key, user_public_key = generate_ecc_key_pair(G_x)
    file_private_key, file_public_key = generate_ecc_key_pair(G_x)
    app_private_key, app_public_key = generate_ecc_key_pair(G_x)

    print(f"User Private Key: {user_private_key}")
    print(f"User Public Key: {user_public_key}")
    print(f"File Private Key: {file_private_key}")
    print(f"File Public Key: {file_public_key}")
    print(f"Application Private Key: {app_private_key}")
    print(f"Application Public Key: {app_public_key}")

    file_path = input("Enter the path to the file: ")
    try:
        with open(file_path, "rb") as f:
            file_content = f.read()
    except FileNotFoundError:
        print("File not found. Please check the path and try again.")
        return

    print(f"\nGenerating Schnorr signature for File ID: {file_id}")
    first_intermediate, second_intermediate, third_intermediate, fourth_intermediate = schnorr_signature(
        user_id, file_private_key, file_public_key, app_public_key, file_id, user_private_key, app_private_key, G_x
    )

    output_filename = file_path + ".signed"
    signature = digitally_sign_file(fourth_intermediate, third_intermediate, file_content, G_x, output_filename)

    print(f"\nSigned file saved as: {output_filename}")
    print(f"Signature: {signature}")

# Entry point
if __name__ == "__main__":
    main()
